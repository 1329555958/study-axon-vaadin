package com.acme.oms.server.jetty

import java.io.File
import org.eclipse.jetty.server.Server
import org.eclipse.jetty.server.ServerConnector
import org.eclipse.jetty.server.handler.HandlerList
import org.eclipse.jetty.servlet.DefaultServlet
import org.eclipse.jetty.servlet.ServletContextHandler
import org.eclipse.jetty.webapp.WebAppContext

import static java.lang.String.format

class EmbeddedJettyServer {

    /**
 * Run application standalone
 * Réécriture en Xtend
 * 
 * Ref.:
 * Using embedded Jetty in your application: Example Code 
 * http://ladstatt.blogspot.fr/2012/06/testing-with-maven-vaadin-scaladin_16.html
 * c'est a priori du Scala
 * 
 */
    //object EmbeddedJettyServer {
    static val STATIC_CONTEXT_PATH = "/static"
    static val IDLE_TIME = 1000 * 60 * 60
    static val STARTING_WEBAPP_MSG = "Starting webapp installed in %s on url : %s, static content served from %s on path %s"
    static val DEFAULT_PORT = 8080
    static val DEFAULT_CONTEXT_PATH = "/"

    def static main(String[] args) {
        println("Usage: java -jar net.ladstatt.web.jar [ ]")
        println
        println('''
               Usage: you can either just start the jar file without arguments 
               or provide the path to the unzipped installation providing arguments as follows.
               ''')
        println
        println("Example: java -jar net.ladstatt.web.jar c:\\temp\\unpacked 4711")
        println

        var Server server
        if (args.size == 0) {
            server = createSelfContainedServer
        } else {
            val jarRoot = new File(args.get(0))
            val staticRoot = new File(args.get(1))
            val port = Integer.valueOf(args.get(2))
            checkArgs(jarRoot, staticRoot)
            val mainContextPath = "/myExampleWebApp"
            server = createServer(port, jarRoot, mainContextPath, staticRoot)
        }
        run(server)
    }
    
    def static checkArgs(File jarRoot, File staticRoot) {
            if (!jarRoot.exists) {
                println(format("Given program directory (%s) doesn't exist!", jarRoot))
            }
            if (!staticRoot.exists) {
                println(format("Given static file directory (%s) doesn't exist!", staticRoot))
            }
    }

    def static void run(Server server) {
        try {
            server.start
            System.in.read
            server.stop
            server.join
        } catch (Exception e) {
            e.printStackTrace
        }
    }

    def static createSelfContainedServer() {
        createServer()
    }

    def static createServer(int port, File basePath, String contextPath, File staticPath) {
        val server = doCreateServer(port)

        val context = new WebAppContext(server, basePath.absolutePath, contextPath)

        val handlers = new HandlerList
        val staticHandler = new ServletContextHandler
        staticHandler.contextPath = STATIC_CONTEXT_PATH
        staticHandler.resourceBase = staticPath.absolutePath
        staticHandler.addServlet(DefaultServlet, "/")
        handlers.addHandler(context)
        handlers.addHandler(staticHandler)

        server.handler = handlers
        println(
            format(STARTING_WEBAPP_MSG, basePath.getAbsoluteFile, contextPath, staticPath.getAbsolutePath, com.acme.oms.server.jetty.EmbeddedJettyServer.STATIC_CONTEXT_PATH))
        server
    }

    def static createServer() {
        val server = doCreateServer(DEFAULT_PORT)

        val context = new WebAppContext
        context.server = server
        context.contextPath = DEFAULT_CONTEXT_PATH

        val protectionDomain = EmbeddedJettyServer.protectionDomain
        val location = protectionDomain.codeSource.location
        context.war = location.toExternalForm

        server.handler = context
        println(location.toExternalForm)
        server
    }

    def static doCreateServer(int port) {
        val server = new Server
        val connector = new ServerConnector(server)
        connector.idleTimeout = IDLE_TIME
        connector.soLingerTime = -1
        connector.port = port
        server.connectors = #[connector]
        server
    }
}
